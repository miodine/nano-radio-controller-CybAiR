/* YourDuinoStarter Example: nRF24L01 Transmit Joystick values
 - WHAT IT DOES: Reads Analog values on A0, A1 and transmits
   them over a nRF24L01 Radio Link to another transceiver.
 - SEE the comments after "//" on each line below
 - CONNECTIONS: nRF24L01 Modules See:
 http://arduino-info.wikispaces.com/Nrf24L01-2.4GHz-HowTo
   1 - GND
   2 - VCC 3.3V !!! NOT 5V
   3 - CE to Arduino pin 9
   4 - CSN to Arduino pin 10
   5 - SCK to Arduino pin 13
   6 - MOSI to Arduino pin 11
   7 - MISO to Arduino pin 12
   8 - UNUSED
   - 
   Analog Joystick or two 10K potentiometers:
   GND to Arduino GND
   VCC to Arduino +5V
   X Pot to Arduino A0
   Y Pot to Arduino A1
   
 - V1.00 11/26/13
   Based on examples at http://www.bajdi.com/
   Questions: terry@yourduino.com */

/*---( Import needed libraries )---*/
#include <Arduino.h>
#include <SPI.h>
#include <nRF24L01.h>
#include <RF24.h>
#include <RH_ASK.h>
#include <stdint.h>

/*---( Declare Constants and Pin Numbers )---*/
#define CE_PIN   9
#define CSN_PIN 10

#define JOYSTICK_1_X A0
#define JOYSTICK_1_Y A1

#define JOYSTICK_2_X A3
#define JOYSTICK_2_Y A4

#define R433_TX 2
#define STATUS_LED 5

const uint64_t pipe = 0xE8E8F0F0E1LL; // dla 2.4 GHz

enum{
    MODE_RADIO_24G = 0,
    MODE_RADIO_433M
};


typedef enum STATUS_BYTE{
    N_E_STOP = 0x80,
    RADIO_24_OK = 0x40,
    RADIO_433_OK = 0x20,
    BUTTON_J1_P = 0x10,
    BUTTON_J2_P = 0x08,
    BUTTON_S1_P = 0x04,
    BUTTON_S2_P = 0x02,
    BUTTON_S3_P = 0x01
} STATUS_BYTE;

RF24 radio_24G(CE_PIN, CSN_PIN);                                    // 2.4 GHz 
RH_ASK radio_433M(2000, 4 /*DEFAULT*/, R433_TX, STATUS_LED); // 433 MHz



/*---( Declare Variables )---*/
unsigned long time_prev  = 0;
unsigned long time_now;
unsigned long time_delta;



uint16_t joy_readout = 0;
uint8_t mode_ = MODE_RADIO_24G;

uint8_t tx_data[9] = {0, };

void update_status_byte(uint8_t* datum, STATUS_BYTE status)
{
  *datum |= status;
};


void setup()  
{
  //INIT SERIAL
  Serial.begin(9600);
  
  //INIT 2.4GHz MODULE
  radio_24G.begin();
  radio_24G.setDataRate(RF24_250KBPS);
  radio_24G.openWritingPipe(pipe);

  //INIT BUTTONS
  pinMode(7, INPUT_PULLUP); //D7 BUTTON
  pinMode(8, INPUT_PULLUP); //D8 BUTTON
  pinMode(6, INPUT);
  pinMode(4, INPUT);
  
  if(!radio_433M.init())
  {
    Serial.println("initialisation failed! -> radio 2.4GHz");
  }
  Serial.println("initialisation succ! -> radio 2.4GHz");
  
  // TEST CASE
  update_status_byte(&tx_data[0], RADIO_24_OK);
  update_status_byte(&tx_data[0], RADIO_433_OK);
  update_status_byte(&tx_data[0], N_E_STOP);
}


void loop() 
{
  // Clear status buffer
  tx_data[0] = 0x00;
  //
  update_status_byte(&tx_data[0], RADIO_24_OK);
  update_status_byte(&tx_data[0], RADIO_433_OK);
  update_status_byte(&tx_data[0], N_E_STOP);

  // Zbieranie danych pomiarowych
  
  // Joysticki 

  joy_readout = (uint16_t)analogRead(JOYSTICK_1_X);
  tx_data[1] = (uint8_t)(joy_readout >> 8);
  tx_data[2] = (uint8_t)joy_readout;
  
  joy_readout = (uint16_t)analogRead(JOYSTICK_1_Y);
  tx_data[3] = (uint8_t)(joy_readout >> 8);
  tx_data[4] = (uint8_t)joy_readout;

  joy_readout = (uint16_t)analogRead(JOYSTICK_2_X);
  tx_data[5] = (uint8_t)(joy_readout >> 8);
  tx_data[6] = (uint8_t)joy_readout;

  joy_readout = (uint16_t)analogRead(JOYSTICK_2_Y);
  tx_data[7] = (uint8_t)(joy_readout >> 8);
  tx_data[8] = (uint8_t)joy_readout;

  if(digitalRead(7)==LOW) update_status_byte(&tx_data[0],BUTTON_J1_P);  
  //if(digitalRead(8)==0) update_status_byte(&tx_data[0],BUTTON_J2_P); 

  //if(digitalRead(4)==HIGH) update_status_byte(&tx_data[0],BUTTON_S1_P); 
  //if(digitalRead(6)==HIGH) update_status_byte(&tx_data[0],BUTTON_S2_P); 
  update_status_byte(&tx_data[0],BUTTON_S3_P);

  switch (mode_)
  {
  case MODE_RADIO_24G:
    radio_24G.write(tx_data, sizeof(tx_data));
    break;
  
  default:
    radio_433M.send(tx_data, sizeof(tx_data));
    radio_433M.waitPacketSent();
    break;
  }
  
  

  time_now = millis();

  while((time_now - time_prev)<1000UL)
  {
    time_now = millis();
  }
  time_prev = millis();
}